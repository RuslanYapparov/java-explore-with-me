DROP TABLE IF EXISTS users CASCADE;
--DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS categories CASCADE;

CREATE TABLE users (
  user_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  CONSTRAINT pk_users PRIMARY KEY (user_id),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email),
  CONSTRAINT NOT_EMPTY_EMAIL_AND_NAME CHECK(email <> '' AND user_name <> '')
);

--CREATE TABLE events (
--  event_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
--  event_title VARCHAR(255) NOT NULL,
--  event_description VARCHAR(2000),
--  event_annotation VARCHAR(1000),
--  event_date TIMESTAMP NOT NULL,
--  event_state VARCHAR(20) NOT NULL,
--  initiator_id INTEGER NOT NULL,
--  category_id INTEGER NOT NULL,
--  geo_latitude REAL NOT NULL,
--  geo_longitude REAL NOT NULL,
--  participant_limit INTEGER NOT NULL,
--  confirmed_requests INTEGER NOT NULL,
--  paid BOOLEAN NOT NULL,
--  request_moderation BOOLEAN NOT NULL,
--  created_on timestamp,
--  published_on timestamp,
--  CONSTRAINT pk_events PRIMARY KEY (event_id),
--  CONSTRAINT fk_initiator_id FOREIGN KEY (initiator_id) REFERENCES users(user_id) ON DELETE CASCADE,
--  CONSTRAINT fk_category_id FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE CASCADE
--);

CREATE TABLE categories (
  category_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  category_name VARCHAR(100) NOT NULL,
  CONSTRAINT pk_categories PRIMARY KEY (category_id),
  CONSTRAINT UQ_CATEGORY_NAME UNIQUE (category_name)
);